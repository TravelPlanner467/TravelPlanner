import os
import psycopg2
from dotenv import load_dotenv

load_dotenv()
DATABASE_URL = os.getenv('DATABASE_URL')

def init_trips_db():
    """Initialize trips table"""
    conn = psycopg2.connect(DATABASE_URL)
    try:
        with conn.cursor() as cur:
            cur.execute("""
                CREATE TABLE IF NOT EXISTS trips (
                  "trip_id" integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                  "user_id" text NOT NULL, 
                  "title" text NOT NULL,
                  "description" text NOT NULL,
                  "start_date" date,
                  "end_date" date,
                  "create_date" timestamptz NOT NULL DEFAULT NOW()
                )
            """)
        conn.commit()
    finally:
        conn.close()

def init_experiences_db():
    """Initialize database schema - runs at startup"""
    conn = psycopg2.connect(DATABASE_URL)
    try:
        with conn.cursor() as cur:
            cur.execute("""
                CREATE TABLE IF NOT EXISTS experiences (
                  "experience_id" integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                  "user_id" text NOT NULL,
                  "title" text NOT NULL,
                  "description" text NOT NULL,
                  "experience_date" date NOT NULL,
                  "create_date" timestamptz NOT NULL DEFAULT NOW(),
                  "address" text NOT NULL,
                  "latitude" double precision NOT NULL,
                  "longitude" double precision NOT NULL,
                  "keywords" text[] NOT NULL DEFAULT '{}',
                  "user_rating" integer
                )
            """)
            cur.execute('CREATE INDEX IF NOT EXISTS experiences_keywords_gin ON experiences USING GIN ("keywords");')
        conn.commit()
    finally:
        conn.close()

def init_trip_experiences_junction():
    """Initialize junction table for many-to-many relationship"""
    conn = psycopg2.connect(DATABASE_URL)
    try:
        with conn.cursor() as cur:
            cur.execute("""
                CREATE TABLE IF NOT EXISTS trip_experiences (
                  "trip_id" integer NOT NULL REFERENCES trips(trip_id) ON DELETE CASCADE,
                  "experience_id" integer NOT NULL REFERENCES experiences(experience_id) ON DELETE CASCADE,
                  "added_date" timestamptz NOT NULL DEFAULT NOW(),
                  PRIMARY KEY (trip_id, experience_id)
                )
            """)
            # Indexes for efficient queries
            cur.execute('CREATE INDEX IF NOT EXISTS trip_experiences_trip_idx ON trip_experiences ("trip_id");')
            cur.execute('CREATE INDEX IF NOT EXISTS trip_experiences_experience_idx ON trip_experiences ("experience_id");')
        conn.commit()
    finally:
        conn.close()

# Initialize in order
if __name__ == "__main__":
    init_trips_db()
    init_experiences_db()
    init_trip_experiences_junction()